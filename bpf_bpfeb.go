// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package prebuilt

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type BpfConfig struct {
	DstPort  uint16
	DropStun uint16
}

type BpfCounterKeyAf uint32

const (
	BpfCounterKeyAfCOUNTER_KEY_AF_UNKNOWN BpfCounterKeyAf = 0
	BpfCounterKeyAfCOUNTER_KEY_AF_IPV4    BpfCounterKeyAf = 1
	BpfCounterKeyAfCOUNTER_KEY_AF_IPV6    BpfCounterKeyAf = 2
	BpfCounterKeyAfCOUNTER_KEY_AF_LEN     BpfCounterKeyAf = 3
)

type BpfCounterKeyPacketsBytesAction uint32

const (
	BpfCounterKeyPacketsBytesActionCOUNTER_KEY_PACKETS_PASS_TOTAL       BpfCounterKeyPacketsBytesAction = 0
	BpfCounterKeyPacketsBytesActionCOUNTER_KEY_BYTES_PASS_TOTAL         BpfCounterKeyPacketsBytesAction = 1
	BpfCounterKeyPacketsBytesActionCOUNTER_KEY_PACKETS_ABORTED_TOTAL    BpfCounterKeyPacketsBytesAction = 2
	BpfCounterKeyPacketsBytesActionCOUNTER_KEY_BYTES_ABORTED_TOTAL      BpfCounterKeyPacketsBytesAction = 3
	BpfCounterKeyPacketsBytesActionCOUNTER_KEY_PACKETS_TX_TOTAL         BpfCounterKeyPacketsBytesAction = 4
	BpfCounterKeyPacketsBytesActionCOUNTER_KEY_BYTES_TX_TOTAL           BpfCounterKeyPacketsBytesAction = 5
	BpfCounterKeyPacketsBytesActionCOUNTER_KEY_PACKETS_DROP_TOTAL       BpfCounterKeyPacketsBytesAction = 6
	BpfCounterKeyPacketsBytesActionCOUNTER_KEY_BYTES_DROP_TOTAL         BpfCounterKeyPacketsBytesAction = 7
	BpfCounterKeyPacketsBytesActionCOUNTER_KEY_PACKETS_BYTES_ACTION_LEN BpfCounterKeyPacketsBytesAction = 8
)

type BpfCounterKeyProgEnd uint32

const (
	BpfCounterKeyProgEndCOUNTER_KEY_END_UNSPECIFIED                BpfCounterKeyProgEnd = 0
	BpfCounterKeyProgEndCOUNTER_KEY_END_UNEXPECTED_FIRST_STUN_ATTR BpfCounterKeyProgEnd = 1
	BpfCounterKeyProgEndCOUNTER_KEY_END_INVALID_UDP_CSUM           BpfCounterKeyProgEnd = 2
	BpfCounterKeyProgEndCOUNTER_KEY_END_INVALID_IP_CSUM            BpfCounterKeyProgEnd = 3
	BpfCounterKeyProgEndCOUNTER_KEY_END_NOT_STUN_PORT              BpfCounterKeyProgEnd = 4
	BpfCounterKeyProgEndCOUNTER_KEY_END_INVALID_SW_ATTR_VAL        BpfCounterKeyProgEnd = 5
	BpfCounterKeyProgEndCOUNTER_KEY_END_DROP_STUN                  BpfCounterKeyProgEnd = 6
	BpfCounterKeyProgEndCOUNTER_KEY_END_LEN                        BpfCounterKeyProgEnd = 7
)

type BpfCountersKey struct {
	Unused  uint8
	Af      uint8
	Pba     uint8
	ProgEnd uint8
}

// LoadBpf returns the embedded CollectionSpec for Bpf.
func LoadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Bpf: %w", err)
	}

	return spec, err
}

// LoadBpfObjects loads Bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfObjects
//	*BpfPrograms
//	*BpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSpecs struct {
	BpfProgramSpecs
	BpfMapSpecs
}

// BpfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgramSpecs struct {
	XdpProgFunc *ebpf.ProgramSpec `ebpf:"xdp_prog_func"`
}

// BpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfMapSpecs struct {
	ConfigMap   *ebpf.MapSpec `ebpf:"config_map"`
	CountersMap *ebpf.MapSpec `ebpf:"counters_map"`
}

// BpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfObjects struct {
	BpfPrograms
	BpfMaps
}

func (o *BpfObjects) Close() error {
	return _BpfClose(
		&o.BpfPrograms,
		&o.BpfMaps,
	)
}

// BpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfMaps struct {
	ConfigMap   *ebpf.Map `ebpf:"config_map"`
	CountersMap *ebpf.Map `ebpf:"counters_map"`
}

func (m *BpfMaps) Close() error {
	return _BpfClose(
		m.ConfigMap,
		m.CountersMap,
	)
}

// BpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPrograms struct {
	XdpProgFunc *ebpf.Program `ebpf:"xdp_prog_func"`
}

func (p *BpfPrograms) Close() error {
	return _BpfClose(
		p.XdpProgFunc,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_bpfeb.o
var _BpfBytes []byte
